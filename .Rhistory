dataOfStudent = read.csv("D:\\APU Stuff\\Bachelor of Computer Science (Intelligent Systems) [APD2F2202CS(IS)]\\Semester 1\\Programming for Data Analysis [CT127-3-2-PFDA]\\Assignment\\student.csv" ,header=TRUE)
dataOfStudent
View(dataOfStudent)
names(dataOfStudent)=c("Index","School_Name","Sex","Age","Home_Area","Family_Size","Parent's_Maritial_Status","Mother's_Education_Level","Father's_Education_Level","Mother's_Job","Father's_Job","Reason_Of_School_Chosen","Guardian","Travelling_Time_to_School","Weekly_Study_Time","Amount_of_Fails_in_Class","Extra_Educational_Support","Family_Educational_Support","Extra_Paid_Classes","Participation_in_Extra_Activities","Attendance_in_Nursery_School","Intention_to_Further_Higher_Education","Internet_Access_at_Home","Romantic_Relationship","Quality_of_Family_Relationship","Free_Time_After_School","Goes_Out_with_Friends","Workday_Alcohol_Consumption","Weekend_Alcohol_Consumption","Current_Health_Status","Number_of_Absences","Math_First_Period_Grade","Math_Second_Period_Grade","Math_Final_Grade")
View(dataOfStudent)
# DATA CLEANING
data_cleaning = function() {
# check for duplicated data
ducplicate_data = function(){
data %>% group_by(sl_no) %>%
filter(n() > 1) %>% summarise(count = n()) %>% print()
}
ducplicate_data() # no duplicate data
}
# load packages
library(ggplot2)
library(ggpubr)
library(magrittr)
library(dplyr)
library(tables)
library(patchwork)
library(tidyverse)
library(scales)
library(ggridges)
library(ggthemes)
# DATA IMPORT
data <- read.csv("D:\APU Stuff\\Bachelor of Computer Science (Intelligent Systems) [APD2F2202CS(IS)]\\Semester 1\\Programming for Data Analysis [CT127-3-2-PFDA]\\Assignment\\Remy ((gonna go have a full mental breakdown now brb\\Placement_Data_Full_Class.csv", header = TRUE)
# DATA EXPLORATION
data_exploration = function(){
# check values
check_values = function(){
print(summary(data))
# check number of columns
print(c("The number of columns",ncol(data))) # 25 columns
# check number of rows
print(c("The number of rows",nrow(data))) # 17007 rows
#check NA values
print(c("The number of missing value in salary before pre-processing",sum(is.na(data$salary)))) # 8265 rows
}
check_values()
print(str(data))
}
data_exploration()
# DATA IMPORT
data <- read.csv("D:\\APU Stuff\\Bachelor of Computer Science (Intelligent Systems) [APD2F2202CS(IS)]\\Semester 1\\Programming for Data Analysis [CT127-3-2-PFDA]\\Assignment\\Remy ((gonna go have a full mental breakdown now brb\\Placement_Data_Full_Class.csv", header = TRUE)
# DATA EXPLORATION
data_exploration = function(){
# check values
check_values = function(){
print(summary(data))
# check number of columns
print(c("The number of columns",ncol(data))) # 25 columns
# check number of rows
print(c("The number of rows",nrow(data))) # 17007 rows
#check NA values
print(c("The number of missing value in salary before pre-processing",sum(is.na(data$salary)))) # 8265 rows
}
check_values()
print(str(data))
}
data_exploration()
# DATA CLEANING
data_cleaning = function() {
# check for duplicated data
ducplicate_data = function(){
data %>% group_by(sl_no) %>%
filter(n() > 1) %>% summarise(count = n()) %>% print()
}
ducplicate_data() # no duplicate data
}
data_cleaning()
# DATA PREPROCESSING
data_pre_processing = function(){
assign_data = function(data){
data$ssc_round <- round(data$ssc_p)
data <- data %>% mutate(ssc_grade = case_when(ssc_round >= 0  & ssc_round <= 39 ~ 'E',
ssc_round >= 40  & ssc_round <= 49 ~ 'D',
ssc_round >= 50  & ssc_round <= 64 ~ 'C',
ssc_round >= 65  & ssc_round <= 79 ~ 'B',
ssc_round >= 80  & ssc_round <= 100 ~ 'A'))
data$hsc_round <- round(data$hsc_p)
data <- data %>% mutate(hsc_grade = case_when(hsc_round >= 0  & hsc_round <= 39 ~ 'F',
hsc_round >= 40  & hsc_round <= 44 ~ 'E',
hsc_round >= 45  & hsc_round <= 49 ~ 'D',
hsc_round >= 50  & hsc_round <= 59 ~ 'C',
hsc_round >= 60  & hsc_round <= 69 ~ 'B',
hsc_round >= 70  & hsc_round <= 100 ~ 'A'))
data$degree_round <- round(data$degree_p)
data <- data %>% mutate(degree_grade = case_when(degree_round >= 0  & degree_round <= 39 ~ 'F',
degree_round >= 40  & degree_round <= 49 ~ 'D',
degree_round >= 50  & degree_round <= 64 ~ 'C',
degree_round >= 65  & degree_round <= 74 ~ 'B',
degree_round >= 75  & degree_round <= 100 ~ 'A'))
data$mba_round <- round(data$mba_p)
data <- data %>% mutate(mba_grade = case_when(mba_round >= 0  & mba_round <= 39 ~ 'F',
mba_round >= 40  & mba_round <= 49 ~ 'D',
mba_round >= 50  & mba_round <= 64 ~ 'C',
mba_round >= 65  & mba_round <= 74 ~ 'B',
mba_round >= 75  & mba_round <= 100 ~ 'A'))
}
return(graded_data <- data %>% assign_data)
}
data_pre_processing()
# Analysis 1-1: Find the number of the student with their grade performance in every state of education.
#--------------------------------------------------------------------------------
Q1A1 = function() {
ssc_grade_count <- graded_data %>% group_by(ssc_grade) %>% summarise(counts = n())
print(ssc_grade_count)
a <- ggplot(ssc_grade_count, aes(x = ssc_grade, y = counts, fill = ssc_grade)) +
geom_bar(stat = "identity") +
geom_text(aes(label = counts), vjust = -0.3) +
theme_minimal() +
scale_fill_grey() +
ggtitle("Quantity of student based on\nSecondary Student's Grade") +
labs(x = "Secondary Education Grade", y = "Quantity of Student", fill = "Grade")
hsc_grade_count <- graded_data %>% group_by(hsc_grade) %>% summarise(counts = n())
print(hsc_grade_count)
b <- ggplot(hsc_grade_count, aes(x = hsc_grade, y = counts, fill = hsc_grade)) +
geom_bar(stat = "identity") +
geom_text(aes(label = counts), vjust = -0.3) +
theme_minimal() +
scale_fill_brewer(palette="Blues") +
ggtitle("Quantity of student based on Higher\nSecondary Student's Grade") +
labs(x = "Higher Secondary Education Grade", y = "Quantity of Student", fill = "Grade")
degree_grade_count <- graded_data %>% group_by(degree_grade) %>% summarise(counts = n())
print(degree_grade_count)
c <- ggplot(degree_grade_count, aes(x = degree_grade, y = counts, fill = degree_grade)) +
geom_bar(stat = "identity") +
geom_text(aes(label = counts), vjust = -0.3) +
theme_minimal() +
scale_fill_brewer(palette="Reds") +
ggtitle("Quantity of student based on\nUndergraduate Grade") +
labs(x = "Undergraduate Grade", y = "Quantity of Student", fill = "Grade")
mba_grade_count <- graded_data %>% group_by(mba_grade) %>% summarise(counts = n())
print(mba_grade_count)
d <- ggplot(mba_grade_count, aes(x = mba_grade, y = counts, fill = mba_grade)) +
geom_bar(stat = "identity") +
geom_text(aes(label = counts), vjust = -0.3) +
theme_minimal() +
scale_fill_brewer(palette="Greens") +
ggtitle("Quantity of student based on\nPostgraduate Grade") +
labs(x = "Postgraduate Grade", y = "Quantity of Student", fill = "Grade")
return(a + b + c + d)
}
Q1A1()
# Analysis 1-2: Find the relationship between parent's job and education and
# student's performance.
#--------------------------------------------------------------------------------
Q1A2 = function() {
mother_data <- graded_data %>%
group_by(Mjob, Medu) %>%
summarise(mean_all = mean(ssc_round + hsc_round + degree_round + mba_round)/4)
print(mother_data)
a1 <- ggplot(mother_data, aes(y=mean_all, x=factor(Mjob), fill = factor(Medu))) +
geom_bar(position="dodge", stat="identity") +
theme_minimal() +
scale_fill_brewer(palette="Reds") +
ggtitle("Average of Every Education\nLevel's Percentage Based\non Mother's Education and Job") +
labs(x="Mother's Job",
y="Average of Student's Performance (%)",
fill = "Mother's Level\nof Education") +
coord_cartesian(ylim = c(70,80)) +
scale_x_discrete(breaks = c("at_home", "health", "other", "services", "teacher"),
labels = c(at_home = "Homemaker", health = "Health-Related",
other = "Others", services = "Service-Related", teacher = "Teacher"))
father_data <- graded_data %>%
group_by(Fjob, Fedu) %>%
summarise(mean_all = mean(ssc_round + hsc_round + degree_round + mba_round)/4)
print(father_data)
b1 <- ggplot(father_data, aes(y=mean_all, x=factor(Fjob), fill = factor(Fedu))) +
geom_bar(position="dodge", stat="identity") +
theme_minimal() +
scale_fill_brewer(palette="Blues") +
ggtitle("Average of Every Education\nLevel's Percentage Based\non Father's Education and Job") +
labs(x="Father's Job",
y="Average of Student's Performance (%)",
fill = "Father's Level\nof Education") +
coord_cartesian(ylim = c(70,80))+
scale_x_discrete(breaks = c("at_home", "health", "other", "services", "teacher"),
labels = c(at_home = "Homemaker", health = "Health-Related",
other = "Others", services = "Service-Related", teacher = "Teacher"))
c1 <- ggarrange(a1, b1, heights = c(5, 5),
ncol = 1, nrow = 2, align = "v")
return(c1)
}
Q1A2()
# Analysis 1-3: Find the relationship between family environment and student's
# choice regarding the board of education.
#--------------------------------------------------------------------------------
Q1A3 = function() {
environment_data <- graded_data %>% group_by(internet, famsup, ssc_b) %>% summarise(count = n())
print(environment_data)
a2 <- ggplot(environment_data, aes(x = ssc_b, y = count, shape=internet, color= famsup)) +
geom_point(size = 5) +
ggtitle("Number of Students in Board of Secondary School") +
labs(x="Board of Secondary Education",
y="Number of Students",
shape = "Internet Access",
color = "Family Support")+
scale_shape_discrete(breaks = c("no", "yes"), labels = c(no = "No", yes = "Yes")) +
scale_color_discrete(breaks = c("no", "yes"), labels = c(no = "No", yes = "Yes"))
environment_data <- graded_data %>% group_by(internet, famsup, hsc_b) %>% summarise(count = n())
print(environment_data)
b2 <- ggplot(environment_data, aes(x = hsc_b, y = count, shape=internet, color= famsup)) +
geom_point(size = 5) +
ggtitle("Number of Students in Board of Higher Secondary School") +
labs(x="Board of Higher\nSecondary Education",
y="Number of Students",
shape = "Internet Access",
color = "Family Support")+
scale_shape_discrete(breaks = c("no", "yes"), labels = c(no = "No", yes = "Yes")) +
scale_color_discrete(breaks = c("no", "yes"), labels = c(no = "No", yes = "Yes"))
c2 <- ggarrange(a2, b2, heights = c(5, 5),
ncol = 1, nrow = 2, align = "v", common.legend = TRUE)
d2 <- annotate_figure(c2,
top = text_grob("Number of students in board of secondary and higher secondary\nschool based on family support and internet access.",
color = "Red",
face = "bold",
size = 16))
return(d2)
}
Q1A3()
return(graded_data <- data %>% assign_data)
# load packages
library(ggplot2)
library(ggpubr)
library(magrittr)
library(dplyr)
library(tables)
library(patchwork)
library(tidyverse)
library(scales)
library(ggridges)
library(ggthemes)
# DATA IMPORT
data <- read.csv("D:\\APU Stuff\\Bachelor of Computer Science (Intelligent Systems) [APD2F2202CS(IS)]\\Semester 1\\Programming for Data Analysis [CT127-3-2-PFDA]\\Assignment\\Remy ((gonna go have a full mental breakdown now brb\\Placement_Data_Full_Class.csv", header = TRUE)
# DATA EXPLORATION
data_exploration = function(){
# check values
check_values = function(){
print(summary(data))
# check number of columns
print(c("The number of columns",ncol(data))) # 25 columns
# check number of rows
print(c("The number of rows",nrow(data))) # 17007 rows
#check NA values
print(c("The number of missing value in salary before pre-processing",sum(is.na(data$salary)))) # 8265 rows
}
check_values()
print(str(data))
}
data_exploration()
# DATA CLEANING
data_cleaning = function() {
# check for duplicated data
ducplicate_data = function(){
data %>% group_by(sl_no) %>%
filter(n() > 1) %>% summarise(count = n()) %>% print()
}
ducplicate_data() # no duplicate data
}
data_cleaning()
# DATA PREPROCESSING
data_pre_processing = function(){
assign_data = function(data){
data$ssc_round <- round(data$ssc_p)
data <- data %>% mutate(ssc_grade = case_when(ssc_round >= 0  & ssc_round <= 39 ~ 'E',
ssc_round >= 40  & ssc_round <= 49 ~ 'D',
ssc_round >= 50  & ssc_round <= 64 ~ 'C',
ssc_round >= 65  & ssc_round <= 79 ~ 'B',
ssc_round >= 80  & ssc_round <= 100 ~ 'A'))
data$hsc_round <- round(data$hsc_p)
data <- data %>% mutate(hsc_grade = case_when(hsc_round >= 0  & hsc_round <= 39 ~ 'F',
hsc_round >= 40  & hsc_round <= 44 ~ 'E',
hsc_round >= 45  & hsc_round <= 49 ~ 'D',
hsc_round >= 50  & hsc_round <= 59 ~ 'C',
hsc_round >= 60  & hsc_round <= 69 ~ 'B',
hsc_round >= 70  & hsc_round <= 100 ~ 'A'))
data$degree_round <- round(data$degree_p)
data <- data %>% mutate(degree_grade = case_when(degree_round >= 0  & degree_round <= 39 ~ 'F',
degree_round >= 40  & degree_round <= 49 ~ 'D',
degree_round >= 50  & degree_round <= 64 ~ 'C',
degree_round >= 65  & degree_round <= 74 ~ 'B',
degree_round >= 75  & degree_round <= 100 ~ 'A'))
data$mba_round <- round(data$mba_p)
data <- data %>% mutate(mba_grade = case_when(mba_round >= 0  & mba_round <= 39 ~ 'F',
mba_round >= 40  & mba_round <= 49 ~ 'D',
mba_round >= 50  & mba_round <= 64 ~ 'C',
mba_round >= 65  & mba_round <= 74 ~ 'B',
mba_round >= 75  & mba_round <= 100 ~ 'A'))
}
return(graded_data <- data %>% assign_data)
}
data_pre_processing()
# Analysis 1-1: Find the number of the student with their grade performance in every state of education.
#--------------------------------------------------------------------------------
Q1A1 = function() {
ssc_grade_count <- graded_data %>% group_by(ssc_grade) %>% summarise(counts = n())
print(ssc_grade_count)
a <- ggplot(ssc_grade_count, aes(x = ssc_grade, y = counts, fill = ssc_grade)) +
geom_bar(stat = "identity") +
geom_text(aes(label = counts), vjust = -0.3) +
theme_minimal() +
scale_fill_grey() +
ggtitle("Quantity of student based on\nSecondary Student's Grade") +
labs(x = "Secondary Education Grade", y = "Quantity of Student", fill = "Grade")
hsc_grade_count <- graded_data %>% group_by(hsc_grade) %>% summarise(counts = n())
print(hsc_grade_count)
b <- ggplot(hsc_grade_count, aes(x = hsc_grade, y = counts, fill = hsc_grade)) +
geom_bar(stat = "identity") +
geom_text(aes(label = counts), vjust = -0.3) +
theme_minimal() +
scale_fill_brewer(palette="Blues") +
ggtitle("Quantity of student based on Higher\nSecondary Student's Grade") +
labs(x = "Higher Secondary Education Grade", y = "Quantity of Student", fill = "Grade")
degree_grade_count <- graded_data %>% group_by(degree_grade) %>% summarise(counts = n())
print(degree_grade_count)
c <- ggplot(degree_grade_count, aes(x = degree_grade, y = counts, fill = degree_grade)) +
geom_bar(stat = "identity") +
geom_text(aes(label = counts), vjust = -0.3) +
theme_minimal() +
scale_fill_brewer(palette="Reds") +
ggtitle("Quantity of student based on\nUndergraduate Grade") +
labs(x = "Undergraduate Grade", y = "Quantity of Student", fill = "Grade")
mba_grade_count <- graded_data %>% group_by(mba_grade) %>% summarise(counts = n())
print(mba_grade_count)
d <- ggplot(mba_grade_count, aes(x = mba_grade, y = counts, fill = mba_grade)) +
geom_bar(stat = "identity") +
geom_text(aes(label = counts), vjust = -0.3) +
theme_minimal() +
scale_fill_brewer(palette="Greens") +
ggtitle("Quantity of student based on\nPostgraduate Grade") +
labs(x = "Postgraduate Grade", y = "Quantity of Student", fill = "Grade")
return(a + b + c + d)
}
Q1A1()
